# -*- coding: utf-8 -*-
"""Neha_Naik_Task1.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dX934PNKr180gX1iciZYBumM93ov3FgX
"""

import pandas as pd

data=pd.read_csv('train.csv')

data.head()

# Commented out IPython magic to ensure Python compatibility.
import random
import numpy as np
import matplotlib.pyplot as plt
from sklearn.cluster import KMeans
from sklearn.datasets import make_blobs
# %matplotlib inline

def convert_non_numerical(input_string):
  result = ''
  for char in input_string:
    if char.isnumeric():
      result += char
    else:
      result += str(ord(char))
  return result

data.info()

data['target'] = data['target'].astype(str)

data['target'] = data['target'].apply(convert_non_numerical)

data['target']=data['target'].astype(int)

data.head()

df=data.drop('T18',axis=1)

df.head()

df.tail()

df.describe()

df.info()

from sklearn.preprocessing import StandardScaler
X = df.values[:,1:]
X = np.nan_to_num(X)
Clus_dataSet = StandardScaler().fit_transform(X)
Clus_dataSet

clusterNum = 3
k_means = KMeans(init = "k-means++", n_clusters = clusterNum, n_init = 12)
k_means.fit(X)
labels = k_means.labels_
print(labels)

df["Clus_km"] = labels
df.head(5)

df.tail(5)

df=df.drop('T1',axis=1)

df.groupby('Clus_km').mean()

import pandas as pd
import matplotlib.pyplot as plt
from mpl_toolkits.mplot3d import Axes3D

# First convert your labels to a numerical type
df['Clus_km'] = pd.Categorical(df['Clus_km'])
df['Clus_km_code'] = df['Clus_km'].cat.codes

# Then create the plot
fig = plt.figure(figsize=(8, 6))
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df['target'], df['T8'], df['T17'], c=df['Clus_km_code'], cmap=plt.cm.Set1, edgecolor='k', s=40)
#ax.set_title("First three features")
ax.set_xlabel("target")
ax.xaxis.set_ticklabels([])
ax.set_ylabel("T8")
ax.yaxis.set_ticklabels([])
ax.set_zlabel("T17")
ax.zaxis.set_ticklabels([])

plt.show()

#test case
new_data_point = np.array([[-90, -70, -60, -55, -70,
                            -57,-90,-73,-84,-86,
                            -89,-56,-89,-90,-80
                             -89,-86,-90,-98,'A33']])

new_data_point = np.vectorize(convert_non_numerical)(new_data_point)

new_data_point_scaled = StandardScaler().fit_transform(new_data_point)

# Predict the cluster for the new data point
predicted_cluster = k_means.predict(new_data_point_scaled)

print("Predicted Cluster:", predicted_cluster)